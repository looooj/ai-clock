#include <wx/wx.h>
#include <wx/timer.h>
#include <ctime>
#include <vector>

class CountdownFrame : public wxFrame {
public:
    CountdownFrame();

private:
    void OnStart(wxCommandEvent& evt);
    void OnTimer(wxTimerEvent& evt);

    wxChoice*   m_choiceHour;
    wxChoice*   m_choiceMin;
    wxChoice*   m_choiceSec;
    wxStaticText* m_lblTime;
    wxButton*     m_btnStart;
    wxTimer       m_timer;
    int           m_remaining;

    wxDECLARE_EVENT_TABLE();
};

enum {
    ID_BTN_START = wxID_HIGHEST + 1,
    ID_TIMER
};

wxBEGIN_EVENT_TABLE(CountdownFrame, wxFrame)
    EVT_BUTTON(ID_BTN_START, CountdownFrame::OnStart)
    EVT_TIMER(ID_TIMER,    CountdownFrame::OnTimer)
wxEND_EVENT_TABLE()

CountdownFrame::CountdownFrame()
    : wxFrame(nullptr, wxID_ANY, "wxWidgets 倒计时器",
              wxDefaultPosition, wxSize(350, 180)),
      m_timer(this, ID_TIMER),
      m_remaining(0)
{
    wxPanel* panel = new wxPanel(this);

    // 准备选项列表
    std::vector<wxString> hours, mins, secs;
    for (int i = 0; i < 24; ++i)
        hours.push_back(wxString::Format("%02d", i));
    for (int i = 0; i < 60; ++i) {
        mins.push_back(wxString::Format("%02d", i));
        secs.push_back(wxString::Format("%02d", i));
    }

    // 创建 3 个下拉框
    m_choiceHour = new wxChoice(panel, wxID_ANY, wxPoint(10, 10),
                                wxSize(60, 25), hours.size(), hours.data());
    m_choiceMin  = new wxChoice(panel, wxID_ANY, wxPoint(80, 10),
                                wxSize(60, 25), mins.size(), mins.data());
    m_choiceSec  = new wxChoice(panel, wxID_ANY, wxPoint(150, 10),
                                wxSize(60, 25), secs.size(), secs.data());

    // 默认值设为当前时间
    std::time_t now = std::time(nullptr);
    std::tm* lt    = std::localtime(&now);
    m_choiceHour->SetSelection(lt->tm_hour);
    m_choiceMin->SetSelection(lt->tm_min);
    m_choiceSec->SetSelection(lt->tm_sec);

    // 启动按钮
    m_btnStart = new wxButton(panel, ID_BTN_START, "Start",
                              wxPoint(230, 10), wxSize(80, 25));

    // 倒计时显示
    m_lblTime = new wxStaticText(panel, wxID_ANY, "00:00:00",
                                 wxPoint(10, 50), wxSize(200, 25));
}

void CountdownFrame::OnStart(wxCommandEvent&)
{
    // 从下拉框读取选择值
    int h = m_choiceHour->GetSelection();
    int m = m_choiceMin->GetSelection();
    int s = m_choiceSec->GetSelection();

    // 计算目标秒数
    int target = h * 3600 + m * 60 + s;

    // 计算当前当日秒数
    std::time_t now = std::time(nullptr);
    std::tm* lt    = std::localtime(&now);
    int current    = lt->tm_hour * 3600 +
                     lt->tm_min  * 60 +
                     lt->tm_sec;

    // 计算剩余秒数，过零点滚动到下一天
    m_remaining = target - current;
    if (m_remaining < 0)
        m_remaining += 24 * 3600;

    // 启动 1 秒定时器
    m_timer.Start(1000);
}

void CountdownFrame::OnTimer(wxTimerEvent&)
{
    if (m_remaining < 0) return;

    // 计算 h:m:s 并更新显示
    int h = m_remaining / 3600;
    int m = (m_remaining % 3600) / 60;
    int s = m_remaining % 60;
    wxString ts = wxString::Format("%02d:%02d:%02d", h, m, s);
    m_lblTime->SetLabel(ts);

    if (--m_remaining < 0) {
        m_timer.Stop();

        // 切换全屏并激活窗口
        ShowFullScreen(true, wxFULLSCREEN_ALL);
        Raise();

        wxMessageBox("倒计时结束！", "通知",
                     wxOK | wxICON_INFORMATION);
    }
}

class MyApp : public wxApp {
public:
    virtual bool OnInit() {
        CountdownFrame* frame = new CountdownFrame();
        frame->Show(true);
        return true;
    }
};

wxIMPLEMENT_APP(MyApp);
